from SCons.Script import *
from os import access, environ, X_OK
import platform

#CacheDir('.scons-cache')
Decider('MD5-timestamp')
SetOption('implicit_cache', True)
SourceCode('.', None)


########################################################################
#
#  various command-line options
#

# site-specific customization for cs.wisc.edu
environ['PATH'] += ':/unsup/llvm-3.4/bin'

def pathIsExecutable(key, val, env):
    found = env.WhereIs(val)
    if found: val = found
    PathVariable.PathIsFile(key, val, env)
    if not access(val, X_OK):
        raise SCons.Errors.UserError('Path for option %s is not executable: %s' % (key, val))

opts = Variables(['.scons-options'], ARGUMENTS)
opts.Add(BoolVariable('DEBUG', 'Compile with extra information for debugging', False))
opts.Add(BoolVariable('OPTIMIZE', 'Compile with optimization', True))
opts.Add(BoolVariable('NATIVECAML', 'Use the native-code OCaml compiler', True))
opts.Add(BoolVariable('PROFILE', 'Turn on performance profiling', False))
opts.Add(BoolVariable('QUANTIFY', 'Turn on performance profiling quantify', False))
opts.Add(BoolVariable('VALGRIND', "Run tests under Valgrinds's memory checker", False))
opts.Add(PathVariable('LLVM_CONFIG', 'Path to llvm-config executable', WhereIs('llvm-config'), pathIsExecutable))
opts.Add('TEST', 'A specific test # to run, or * for all tests', '*')

if platform.system() == 'Darwin':
    Is64 = False
else:
    Is64 = platform.architecture()[0] == '64bit'

env = Environment(
    options=opts,
    tools=[
        'default',
        'edp',
        ],
    toolpath=[
        'post/tests',
        ],
    ERROR_CODES=File('negative-error-codes.txt'),
    Is64=Is64,
    )

env.PrependENVPath('PATH', [
        '/s/gcc-4.8.1/bin',
	'/opt/local/bin',
        '/unsup/ocaml/bin',
        '/s/texlive-2012/bin',
	'/usr/local/texlive/2011/bin/x86_64-linux',
        '/s/std/bin',
        ])

Help(opts.GenerateHelpText(env))
opts.Save('.scons-options', env)


########################################################################
#
#  basic LaTeX document rendering
#

env.AppendUnique(
        COMMONLATEXFLAGS=['-file-line-error', '-interaction=batchmode'],
        LATEXFLAGS='$COMMONLATEXFLAGS',
        PDFLATEXFLAGS='$COMMONLATEXFLAGS',
        BIBTEXFLAGS='-terse',
        )


########################################################################
#
#  shared compiliation flags
#

flags = [
    '-Wall',
    '-Wformat=2',
    '-Wextra',
    '${("", "-g")[DEBUG]}',
    '${("", "-O")[OPTIMIZE]}',
    '${("", "-pg")[PROFILE]}',
    '${("-m32", "")[Is64]}',
    ]

env.AppendUnique(
    CCFLAGS=flags,
    LINKFLAGS=flags,
    )


########################################################################
#
#  subsidiary scons scripts
#

subdirs = [
    # third-party libraries
    'buddy',
    'wpds',
    'lib',

    # our stuff
    'post',
    ]

if 'pdflatex' in env['TOOLS']:
    subdirs += [
        ]
else:
    SCons.Warnings.warn(SCons.Warnings.WarningOnByDefault, 'pdflatex unavailable; skipping paper targets')

SConscript(dirs=subdirs, exports='env')

pdfs = Glob('*/*.pdf')
Alias('pdf', pdfs)
