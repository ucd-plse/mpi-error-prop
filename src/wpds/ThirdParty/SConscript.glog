from os.path import join
import urllib
######################
# @author: Prathmesh Prabhu, Evan Driscoll

import sys
import os
import shutil
import platform
import subprocess

glog = 'glog-0.3.2'

Import('Debug')
Import('LibInstallDir')
Import('ThirdPartyIncludeDir')
Import('BaseEnv')
Import('Is64')

env = BaseEnv.Clone()

if Debug:
    print '\n+++ Entered "#/ThirdParty/SConscript.glog"\n'


compileCom = []
installCom = []
headerCom = []


def is_file_built_correctly(filename):
    if not File(filename).exists():
        return False
    if platform.system() == 'Windows':
        # Oh well. Sucks to be you. Hopefully it's right.
        return True
    filetype = subprocess.Popen(["file", "--dereference", filename], stdout=subprocess.PIPE).stdout.read()
    if '32-bit' in filetype:
        return not Is64
    if '64-bit' in filetype:
        return Is64
    print
    print "*** Huh? I ran '", file, filename, "' and it said"
    print "***", filetype.strip()
    print "*** which does not contain 32-bit or 64-bit"
    print
    assert False

addl_32_bit_flags = ''
if not Is64:
    addl_32_bit_flags = 'CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32'


#setup commands for build according as what files already exist
#Trying to give a coarse grained incremental build.

# This builds glog
if not is_file_built_correctly(os.path.join(glog,'.libs','libglog.so')):
    assert ' ' not in os.getcwd()
    targz = glog + '.tar.gz'
    compileCom = ['tar zxvf %s' %targz,
                  'cd %s && ./configure --prefix=%s --libdir=%s %s' %(glog,join(os.getcwd(),glog), LibInstallDir, addl_32_bit_flags),
                  'cd %s && make;' %(glog)]

# This installs glog to the normal LibInstallDir
if not is_file_built_correctly(os.path.join(LibInstallDir,'libglog.so')):
    assert ' ' not in glog
    installCom = ['cd %s; make install;' %(glog)]

# This copies glog header files to ThirdParty/include/glog
destIncDir = join(ThirdPartyIncludeDir, 'glog')
if not Dir(destIncDir).exists():
    fromInc = join(os.getcwd(), glog, 'include')
    assert ' ' not in destIncDir
    assert ' ' not in fromInc
    assert ' ' not in ThirdPartyIncludeDir
    headerCom = ['mkdir -p %s && cp -r %s/* %s;' % (destIncDir, fromInc, ThirdPartyIncludeDir)]

#The acual commands to run during the build
command = compileCom + installCom + headerCom
env.Execute(command)  

built = [('glog', ThirdPartyIncludeDir)]
Return('built')
